generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NETLIFY_DATABASE_URL")
  directUrl = env("NETLIFY_DATABASE_URL_UNPOOLED")
}

model User {
  id               String              @id @default(cuid())
  name             String?
  email            String?             @unique
  emailVerified    DateTime?
  image            String?
  username         String?             @unique @db.VarChar(32)
  fullName         String?
  handle           String?             @unique
  bio              String?
  onboardingStatus OnboardingStatus    @default(profile)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  accounts         Account[]
  authenticators   Authenticator[]
  progress         OnboardingProgress?
  sessions         Session[]
  waitlists        Waitlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model OnboardingProgress {
  userId      String  @id
  profileDone Boolean @default(false)
  courseDone  Boolean @default(false)
  contentDone Boolean @default(false)
  priceDone   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Waitlist {
  id             String            @id @default(cuid())
  ownerId        String
  title          String
  courseBio      String?
  about          String?
  slug           String?           @unique
  thumbnailUrl   String?
  bannerVideoUrl String?
  trustedBy      Int?
  currency       String            @default("INR")
  priceAmount    Int?
  launchDate     DateTime?
  buttonLabel    String?
  published      Boolean           @default(false)
  publishedAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  payments       Payment[]
  subscribers    Subscriber[]
  owner          User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  benefits       WaitlistBenefit[]
  faqs           WaitlistFaq[]
  media          WaitlistMedia[]
  socials        WaitlistSocial?

  @@index([ownerId])
}

model WaitlistMedia {
  id           String    @id @default(cuid())
  waitlistId   String
  kind         MediaKind
  url          String
  displayOrder Int       @default(0)
  waitlist     Waitlist  @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@index([waitlistId, kind])
}

model WaitlistBenefit {
  id           String   @id @default(cuid())
  waitlistId   String
  text         String
  displayOrder Int      @default(0)
  waitlist     Waitlist @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@index([waitlistId])
}

model WaitlistSocial {
  waitlistId   String   @id
  websiteUrl   String?
  youtubeUrl   String?
  instagramUrl String?
  linkedinUrl  String?
  facebookUrl  String?
  xUrl         String?
  waitlist     Waitlist @relation(fields: [waitlistId], references: [id], onDelete: Cascade)
}

model WaitlistFaq {
  id           String   @id @default(cuid())
  waitlistId   String
  question     String
  answer       String
  displayOrder Int      @default(0)
  waitlist     Waitlist @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@index([waitlistId])
}

model Subscriber {
  id          String           @id @default(cuid())
  waitlistId  String
  fullName    String?
  email       String
  priceAmount Int?
  currency    String?
  status      SubscriberStatus @default(LEAD)
  createdAt   DateTime         @default(now())
  payment     Payment?
  waitlist    Waitlist         @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@unique([waitlistId, email])
  @@index([waitlistId, status])
}

model Payment {
  id           String          @id @default(cuid())
  waitlistId   String
  subscriberId String          @unique
  provider     PaymentProvider
  method       PaymentMethod?
  amount       Int
  currency     String
  status       PaymentStatus   @default(CREATED)
  externalId   String?
  orderId      String?
  receipt      String?
  rawResponse  Json?
  createdAt    DateTime        @default(now())
  capturedAt   DateTime?
  subscriber   Subscriber      @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  waitlist     Waitlist        @relation(fields: [waitlistId], references: [id], onDelete: Cascade)

  @@index([waitlistId, status])
  @@index([provider, externalId])
}

enum OnboardingStatus {
  profile
  course
  content
  price
  completed
}

enum MediaKind {
  IMAGE
  VIDEO
}

enum SubscriberStatus {
  LEAD
  PAID
  REFUNDED
  FAILED
}

enum PaymentProvider {
  RAZORPAY
  STRIPE
  CASHFREE
  PAYTM
  OTHER
}

enum PaymentMethod {
  UPI
  CARD
  NETBANKING
  WALLET
  OTHER
}

enum PaymentStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}
